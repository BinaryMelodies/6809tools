#! /usr/bin/python3

# Converts templates into files

import sys
from io import StringIO

class Process:
	def __init__(self):
		self.current_output = None
		self.current_file = None
		self.current_storage = None
		self.storages = {}

	def finish_storing(self):
		if self.current_storage is not None:
			self.storages[self.current_storage] = self.current_file.getvalue()
			self.current_file = self.current_output
			self.current_storage = None

	def handle_command(self, command):
		ix = command.find(' ')
		if ix != -1:
			arguments = command[ix + 1:]
			command = command[:ix]
		else:
			arguments = ''

		if command == 'comment':
			return

		if command in {'store', 'return'}:
			self.finish_storing()

		if command == 'return':
			pass
		elif command == 'store':
			self.current_file = StringIO()
			self.current_storage = arguments
		elif command == 'load':
			print(self.storages[arguments], file = self.current_file)
		else:
			# fallback
			print(self.storages[command], file = self.current_file)
			#self.include_generated_text(command)

	def prefix_line(self):
		print("/* This file is automatically generated */", file = self.current_file)

	def process_file(self, infile, outfile):
		self.current_file = self.current_output = outfile
		self.prefix_line()
		for line in infile:
			if line.endswith('\n'):
				line = line[:-1]
			if line.startswith('@@'):
				print(line[1:], file = self.current_file)
			elif line.startswith('@'):
				self.handle_command(line[1:].strip())
			else:
				print(line, file = self.current_file)
		self.finish_storing()

def main():
	filenames = []
	latest = None
	i = 1
	while i < len(sys.argv):
		arg = sys.argv[i]
		if arg.startswith('-'):
			if arg.startswith('-d'):
				if len(arg) == 2:
					i += 1
					if i >= len(sys.argv):
						print("Error: expected command after -t flag", file = sys.stderr)
						exit(1)
					cmd = sys.argv[i]
				else:
					cmd = arg[2:]
				latest = [cmd, 'declare']
				filenames.append(latest)
			elif arg == '-h':
				print(f"{sys.argv[0]} {{-d <DECLARATION FILENAME>|<INPUT FILENAME> (-o <OUTPUT FILENAME>)}}")
				exit(0)
			elif arg == '-o':
				if len(arg) == 2:
					i += 1
					if i >= len(sys.argv):
						print("Error: expected file name after -o flag", file = sys.stderr)
						exit(1)
					fn = sys.argv[i]
					arg = '-o ' + fn
				else:
					fn = arg[2:]
				if latest is None or latest[1] is not None:
					print(f"Error: expected input file before {arg}", file = sys.stderr)
					exit(1)
				else:
					latest[1] = ('-o', fn)
			else:
				print(f"Error: unknown flag {arg}", file = sys.stderr)
				exit(1)
		else:
			latest = [arg, None]
			filenames.append(latest)
		i += 1

	process = Process()
	for infilename, modifier in filenames:
		if type(modifier) is tuple and modifier[0] == '-o':
			outfilename = modifier[1]
		elif infilename.endswith('.t'):
			outfilename = infilename[:-2]
		else:
			outfilename = infilename + '.out'
		with open(infilename, 'r') as infile:
			if modifier == 'declare':
				process.process_file(infile, StringIO()) # ignores output
			else:
				with open(outfilename, 'w') as outfile:
					process.process_file(infile, outfile)

if __name__ == '__main__':
	main()

